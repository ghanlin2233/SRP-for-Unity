#pragma kernel ClusterGenerate
#pragma enable_d3d11_debug_symbols

struct ClusterAABB
{
    float3 p0, p1, p2, p3, p4, p5, p6, p7;
};


RWStructuredBuffer<ClusterAABB> _clusterBuffer;

float4x4 _vpMatrixInv;
float _numClusterX;
float _numClusterY;
float _numClusterZ;

// Convert clip space coordinates to view space
float3 ClipToWorld(float3 clip)
{
	float4 v4 = float4(clip, 1.0);
    v4 = mul(_vpMatrixInv, v4);
    v4 /= v4.w;
    return v4.xyz;
}

uint Index3DTo1D(uint3 i)
{
    return i.z * _numClusterX * _numClusterY
        + i.y * _numClusterX
        + i.x;
}
[numthreads(32,32,1)]
void ClusterGenerate (uint3 gtid : SV_GroupThreadID, uint3 gid : SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    //计算
    uint i = gtid.x, j = gtid.y, k = gid.x;
    uint3 clusterIndex_3D = uint3(i, j, k);
    uint clusterIndex_1D = Index3DTo1D(clusterIndex_3D);

    //NDC视椎体
    float xmin = (i / _numClusterX) * 2 - 1;
    float xmax = ((i + 1) / _numClusterX) * 2 - 1;
    float ymin = (j / _numClusterY) * 2 - 1;
    float ymax = ((j + 1) / _numClusterY) * 2 - 1;
    float zmin = k / _numClusterZ;
    float zmax = (k + 1) / _numClusterZ;

    //反投影得到世界空间坐标
    float3 p0 = ClipToWorld(float3(xmin, ymin, 0));
    float3 p1 = ClipToWorld(float3(xmin, ymin, 1));
    float3 p2 = ClipToWorld(float3(xmin, ymax, 0));
    float3 p3 = ClipToWorld(float3(xmin, ymax, 1));
    float3 p4 = ClipToWorld(float3(xmax, ymin, 0));
    float3 p5 = ClipToWorld(float3(xmax, ymin, 1));
    float3 p6 = ClipToWorld(float3(xmax, ymax, 0));
    float3 p7 = ClipToWorld(float3(xmax, ymax, 1));

    ClusterAABB aabb;
    aabb.p0 = p0 + zmin * (p1 - p0);
    aabb.p1 = p0 + zmax * (p1 - p0);
    aabb.p2 = p2 + zmin * (p3 - p2);
    aabb.p3 = p2 + zmax * (p3 - p2);
    aabb.p4 = p4 + zmin * (p5 - p4);
    aabb.p5 = p4 + zmax * (p5 - p4);
    aabb.p6 = p6 + zmin * (p7 - p6);
    aabb.p7 = p6 + zmax * (p7 - p6);

    _clusterBuffer[clusterIndex_1D] = aabb;
}
