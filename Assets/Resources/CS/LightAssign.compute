#pragma kernel LightAssign

#include "UnityCG.cginc"


struct ClusterAABB
{
    float3 p0, p1, p2, p3, p4, p5, p6, p7;
};
struct PointLight
{
    float3 position;
    float intensity;
    float3 color;
    float radius;
};
struct LightIndex
{
    int start;
    int count;
};
RWStructuredBuffer<ClusterAABB> _clusterBuffer;
RWStructuredBuffer<PointLight> _lightBuffer;
RWStructuredBuffer<LightIndex> _assignTable;
RWStructuredBuffer<uint> _lightAssignBuffer;

float _numClusterX;
float _numClusterY;
float _numClusterZ;
int _maxNumLightsPerCluster;
int _numLights;

uint Index3DTo1D(uint3 i)
{
    return i.z * _numClusterX * _numClusterY
        + i.y * _numClusterX
        + i.x;
}
bool IsPointIntSphere(float3 p, float4 sphere)
{
    return distance(p, sphere.xyz) < sphere.w;
}
bool ClusterLightInsection(ClusterAABB aabb, PointLight lit)
{
    float4 sphere = float4(lit.position, lit.radius);
    return IsPointIntSphere(aabb.p0, sphere)
        || IsPointIntSphere(aabb.p1, sphere)
        || IsPointIntSphere(aabb.p2, sphere)
        || IsPointIntSphere(aabb.p3, sphere)
        || IsPointIntSphere(aabb.p4, sphere)
        || IsPointIntSphere(aabb.p5, sphere)
        || IsPointIntSphere(aabb.p6, sphere)
        || IsPointIntSphere(aabb.p7, sphere);
}

[numthreads(32,32,1)]
void LightAssign(uint3 gid : SV_GroupID, uint3 gtid : SV_GroupThreadID)
{
    //计算
    uint i = gtid.x, j = gtid.y, k = gid.x;
    uint3 clusterIndex_3D = uint3(i, j, k);
    uint clusterIndex_1D = Index3DTo1D(clusterIndex_3D);

    ClusterAABB aabb = _clusterBuffer[clusterIndex_1D];

    //在Assign中的索引
    uint startIndex = clusterIndex_1D * _maxNumLightsPerCluster;
    uint endIndex = startIndex;

    //和光源求交
    for(int id = 0; id < _numLights; id++)
    {
        PointLight p = _lightBuffer[id];
        if(!ClusterLightInsection(aabb, p)) continue;
        _lightAssignBuffer[endIndex++] = uint(id);
    }

    //结果
    LightIndex idx;
    idx.count = endIndex - startIndex;
    idx.start = startIndex;
    _assignTable[clusterIndex_1D] = idx;
}
